name: Automated Code Quality & Dependency Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC for automated maintenance
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_dependency_audit:
        description: 'Force dependency audit and cleanup'
        required: false
        default: false
        type: boolean

jobs:
  automated-fixes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install dependencies
        run: npm ci

      - name: Run Deno lint with auto-fix
        run: |
          echo "🔧 Running Deno lint --fix..."
          deno lint --fix || echo "⚠️ Deno lint encountered issues"
        continue-on-error: true

      - name: Run ESLint with auto-fix
        run: |
          echo "🔧 Running ESLint --fix..."
          npm run lint:fix || echo "⚠️ ESLint encountered issues"
        continue-on-error: true

      - name: Run Prettier formatting
        run: |
          echo "🔧 Running Prettier --write..."
          npm run format || echo "⚠️ Prettier encountered issues"
        continue-on-error: true

      - name: Check for changes after auto-fixes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📝 Changes detected after automated fixes"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "✅ No changes needed"
          fi

      - name: Commit and push automated fixes
        if: steps.changes.outputs.changes == 'true' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Code Quality Bot"
          git add .
          git commit -m "🤖 Automated code quality fixes

          - Applied Deno lint --fix
          - Applied ESLint --fix  
          - Applied Prettier formatting
          
          This commit was automatically generated by the self-healing CI system."
          git push

      - name: Check for remaining issues
        id: remaining_issues
        run: |
          echo "🔍 Checking for remaining unfixable issues..."
          
          # Check TypeScript errors
          npm run typecheck > typecheck.log 2>&1 || echo "typecheck_errors=true" >> $GITHUB_OUTPUT
          
          # Check ESLint errors that couldn't be auto-fixed
          npm run lint > eslint.log 2>&1 || echo "eslint_errors=true" >> $GITHUB_OUTPUT
          
          # Check Prettier issues
          npm run format:check > prettier.log 2>&1 || echo "prettier_errors=true" >> $GITHUB_OUTPUT
          
          # Check Deno lint issues
          deno lint > deno_lint.log 2>&1 || echo "deno_errors=true" >> $GITHUB_OUTPUT

      - name: Create maintenance log
        run: |
          mkdir -p .maintenance-logs
          echo "# Automated Maintenance Report - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > .maintenance-logs/latest-report.md
          echo "" >> .maintenance-logs/latest-report.md
          echo "## Summary" >> .maintenance-logs/latest-report.md
          echo "- Trigger: ${{ github.event_name }}" >> .maintenance-logs/latest-report.md
          echo "- Auto-fixes applied: ${{ steps.changes.outputs.changes }}" >> .maintenance-logs/latest-report.md
          echo "" >> .maintenance-logs/latest-report.md
          
          if [ "${{ steps.remaining_issues.outputs.typecheck_errors }}" = "true" ]; then
            echo "## ⚠️ TypeScript Errors Requiring Manual Intervention" >> .maintenance-logs/latest-report.md
            echo '```' >> .maintenance-logs/latest-report.md
            head -50 typecheck.log >> .maintenance-logs/latest-report.md || echo "No typecheck.log found" >> .maintenance-logs/latest-report.md
            echo '```' >> .maintenance-logs/latest-report.md
            echo "" >> .maintenance-logs/latest-report.md
          fi
          
          if [ "${{ steps.remaining_issues.outputs.eslint_errors }}" = "true" ]; then
            echo "## ⚠️ ESLint Errors Requiring Manual Intervention" >> .maintenance-logs/latest-report.md
            echo '```' >> .maintenance-logs/latest-report.md
            head -50 eslint.log >> .maintenance-logs/latest-report.md || echo "No eslint.log found" >> .maintenance-logs/latest-report.md
            echo '```' >> .maintenance-logs/latest-report.md
            echo "" >> .maintenance-logs/latest-report.md
          fi

      - name: Create issue for unfixable errors
        if: steps.remaining_issues.outputs.typecheck_errors == 'true' || steps.remaining_issues.outputs.eslint_errors == 'true' || steps.remaining_issues.outputs.prettier_errors == 'true' || steps.remaining_issues.outputs.deno_errors == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check if there's already an open issue for maintenance
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['automated-maintenance', 'needs-manual-intervention'],
              state: 'open'
            });

            const reportContent = fs.readFileSync('.maintenance-logs/latest-report.md', 'utf8');
            const body = [
              "The automated code quality system has detected issues that require manual intervention.",
              "",
              reportContent,
              "",
              "## Next Steps",
              "1. Review the errors above",
              "2. Fix the issues manually",
              "3. Close this issue once resolved",
              "",
              "This issue was automatically created by the self-healing CI system."
            ].join('\n');

            if (issues.data.length === 0) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🤖 Automated Maintenance: Manual Intervention Required - ${new Date().toISOString().split('T')[0]}`,
                body,
                labels: ['automated-maintenance', 'needs-manual-intervention', 'bug']
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: [
                  `## Updated Maintenance Report - ${new Date().toISOString()}`,
                  "",
                  reportContent
                ].join('\n')
              });
            }
            
  dependency-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    if: github.event_name == 'schedule' || github.event.inputs.force_dependency_audit == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies for security vulnerabilities
        run: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level moderate > audit.log 2>&1 || echo "Security vulnerabilities found"

      - name: Check for unused dependencies
        run: |
          echo "🔍 Checking for unused dependencies..."
          
          # Run our custom dependency audit script
          npm run audit:deps || echo "Dependency issues found"

      - name: Check dependency freshness
        run: |
          echo "🕒 Checking dependency age..."
          
          # Check for outdated dependencies
          npm outdated --json > outdated.json 2>&1 || true
          
          # Check for dependencies not updated in 6+ months
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const sixMonthsAgo = new Date();
            sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
            
            console.log('📅 Checking dependency last update dates...');
            
            const allDeps = { ...packageJson.dependencies, ...packageJson.devDependencies };
            
            // This would require npm registry API calls in a real implementation
            // For now, we'll just log the check
            console.log('Dependencies to check:', Object.keys(allDeps).length);
          " >> dependency-report.txt

      - name: Log dependency changes
        run: |
          mkdir -p .maintenance-logs
          echo "# Dependency Audit Report - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" > .maintenance-logs/dependency-audit.md
          echo "" >> .maintenance-logs/dependency-audit.md
          
          # Copy the report generated by our audit script
          if [ -f .maintenance-logs/dependency-analysis.json ]; then
            echo "## Dependency Analysis Summary" >> .maintenance-logs/dependency-audit.md
            echo '```json' >> .maintenance-logs/dependency-audit.md
            cat .maintenance-logs/dependency-analysis.json >> .maintenance-logs/dependency-audit.md
            echo '```' >> .maintenance-logs/dependency-audit.md
          fi
          
          echo "" >> .maintenance-logs/dependency-audit.md
          echo "## Security Audit" >> .maintenance-logs/dependency-audit.md
          echo '```' >> .maintenance-logs/dependency-audit.md
          npm audit >> .maintenance-logs/dependency-audit.md || echo "No security issues found" >> .maintenance-logs/dependency-audit.md
          echo '```' >> .maintenance-logs/dependency-audit.md

      - name: Commit dependency audit log
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Dependency Audit Bot"
          git add .maintenance-logs/
          git commit -m "📊 Automated dependency audit log

          Generated dependency audit report with:
          - Unused dependency analysis
          - Security vulnerability scan
          - Dependency freshness check
          
          This commit was automatically generated by the dependency management system." || echo "No changes to commit"
          git push || echo "No changes to push"
